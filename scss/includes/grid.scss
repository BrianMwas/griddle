@import 'scss/variables/breakpoints';
$directions: "top" "right" "bottom" "left";
$sizes: "" "-md" "-lg";
$properties: "left" "right" "center" "start" "normal";
$maximum: 12;

@function get_first_chars($word, $number) {
  @return str-slice($word, 0, $number);
}

/* Class Generation
------------------------- */
@mixin grid_item_breakpoint_spans($name, $breakpoint, $spans, $grid_direction) {
  // is-{col|row}-{breakpoint}-{number} --- Ex: .is-col-6-lg
  .is-#{get_first_chars($grid_direction, 3)}-#{$spans} {
    grid-#{$grid_direction}: span #{$spans};
  }
  
  @media screen and (min-width: $breakpoint) {
    .is-#{get_first_chars($grid_direction, 3)}-#{$spans}-#{$name} {
      grid-#{$grid_direction}: span #{$spans} !important;
    }
  }
}

@mixin grid_item_spans($grid_direction) {
  @for $i from 1 through 12 {
    @for $b from 1 through length($breakpoints) {
      @include grid_item_breakpoint_spans(#{nth($breakpoints, $b)}, #{nth($breakpoint_values, $b)}, $i, $grid_direction);
    }
  }
}

@mixin grid_has($grid_direction) {
  // Generate Grid Grid Template Classes --- Ex: .has-col-6 or .has-col-4-md
  @for $i from 1 through $maximum {
    .has-#{get_first_chars($grid_direction, 3)}-#{$i} {
      grid-template-#{$grid_direction}: repeat($i, 1fr);
      & > * { grid-column: span #{$i}; } // Items without a .is-col class are 12 by default
    }
    
    @for $b from 1 through length($breakpoints) {
      .has-#{get_first_chars($grid_direction, 3)}-#{$i}-#{nth($breakpoints, $b)} {
        & > * { grid-column: span #{$i}; } // Items without a .is-col class are 12 by default
        
        @media screen and (min-width: #{nth($breakpoint_values, $b)}) {
          grid-template-#{$grid_direction}: repeat($i, 1fr) !important;
        }
      }
    }
  }
}

@mixin generate_gap($grid_direction) {
  // Generate Grid Gap Classes --- Ex: .has-col-gap-md (medium column gap)
  @each $size in $sizes {
    $space: 1;
    @each $direction in $grid_direction {
      .has-#{get_first_chars($grid_direction, 3)}-gap#{$size} {
        grid-#{$direction}-gap: #{$space}rem;
      }
      $space: $space + .5;
    }
  }
  
  // No Col/Row Gap Class --- Ex: .has-no-col-gap
  .has-no-#{get_first_chars($grid_direction, 3)}-gap { grid-#{$grid_direction}-gap: 0; }
}

@mixin generate_direction($direction) {
  // Generate Direction Classes --- Ex: .is-rtl or .is-ltr
  @for $i from 1 through length($breakpoints) {
    .is-#{$direction} { direction: rtl; }
    .is-#{$direction}-#{nth($breakpoints, $i)} {
      @media screen and (min-width: #{nth($breakpoint_values, $i)}) { direction: #{$direction}; }
    }
  }
}

@mixin generate_place_self() {
  // Generate Place Self Classes --- Ex: .is-placed-left
  @each $property in $properties {
    .is-placed-#{$property} {
      place-self: #{$property};
    }
  }
}

@mixin generate_order_classes($grid_direction) {
  // Generate Order Classes --- Ex: is-order-2-lg
  @for $i from 1 through $maximum {
    .is-order-#{$i} { order: #{$i}; }
    
    @for $b from 1 through length($breakpoints) {
      .is-order-#{$i}-#{nth($breakpoints, $b)} {
        @media screen and (min-width: #{nth($breakpoint_values, $b)}) { order: #{$i} }
      }
    }
  }
}

/* Grid
------------------------ */
.is-grid,
.is-grid-inline {
  display: grid;
  grid-template-rows: auto;
  grid-template-columns: repeat(#{$maximum}, 1fr); // 12 Column Grid By Default
  direction: ltr;
  grid-column-gap: 1rem;
  grid-row-gap: 1rem;
  
  & > * { // Items without a .is-col class are 12 by default
    grid-column: span #{$maximum};
  }
  
  &.is-dense { grid-auto-flow: dense }
  &.has-wrapped-row {
    grid-auto-flow: row;
    &.is-dense { grid-auto-flow: row dense }
  }
  &.has-wrapped-col {
    grid-auto-flow: column;
    &.is-dense { grid-auto-flow: column dense }
  }
}

.is-grid-inline {
  display: inline-grid !important;
}

@include generate_gap("row");
@include generate_gap("column");
@include generate_direction("ltr");
@include generate_direction("rtl");
@include generate_place_self;
@include generate_order_classes("row");
@include generate_order_classes("column");
@include grid_has("rows");
@include grid_has("columns");
@include grid_item_spans("row")
@include grid_item_spans("column")